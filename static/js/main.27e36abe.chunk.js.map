{"version":3,"sources":["components/Previewer/index.js","components/Editor/index.js","App.js","constants/index.js","serviceWorker.js","index.js"],"names":["Previewer","renderer","marked","Renderer","setOptions","breaks","link","href","title","text","table","body","image","html","parser","lexer","this","props","textPreview","console","log","className","id","dangerouslySetInnerHTML","__html","React","Component","Editor","onChange","type","App","state","mdText","bind","event","setState","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uRAIqBA,E,uKAGjB,IAAMC,EAAW,IAAIC,IAAOC,SAC5BD,IAAOE,WAAW,CAChBC,QAAQ,IAEVJ,EAASK,KAAO,SAAUC,EAAMC,EAAOC,GACrC,MAAM,GAAN,0CAAsCF,EAAtC,aAA+CE,GAA/C,SAEFR,EAASS,MAAQ,SAAUF,EAAOG,GAChC,MAAM,GAAN,+GAA2GH,EAA3G,0BAAkIG,GAAlI,2BAEFV,EAASW,MAAQ,SAACL,EAAMC,EAAOC,GAAd,oCACCF,EADD,kBACeE,EADf,uCAGjB,IAAMI,EAAOX,IAAOY,OAAOZ,IAAOa,MAAMC,KAAKC,MAAMC,cAGnD,OAFAC,QAAQC,IAAIP,GAGV,yBAAKQ,UAAU,iBACb,wBAAIA,UAAU,UAAd,aACA,yBAAKC,GAAG,UAAUD,UAAU,WAC1BE,wBAAyB,CAAEC,OAAQtB,IAAOc,KAAKC,MAAMC,YAAa,CAAEjB,SAAUA,Y,GAvBjDwB,IAAMC,WCFxBC,E,uKAEjB,OACE,yBAAKN,UAAU,cACb,wBAAIA,UAAU,UAAd,UACA,8BAAUC,GAAG,SAASM,SAAUZ,KAAKC,MAAMW,SAAUC,KAAK,QAAQb,KAAKC,MAAMR,W,GALjDgB,IAAMC,WCwC3BI,E,kDAlCb,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IACDc,MAAQ,CACXC,OCXkB,+qCDapB,EAAKJ,SAAW,EAAKA,SAASK,KAAd,gBAChBd,QAAQC,IAAI,EAAKW,MAAMC,QANN,E,qDAQVE,GACPlB,KAAKmB,SAAS,CACZH,OAAQE,EAAME,OAAOC,U,+BAIvB,OACE,yBAAKhB,UAAU,OAEb,4BAAQA,UAAU,cAChB,mDAGF,6BAASA,UAAU,aACjB,kBAAC,EAAD,CAAQO,SAAUZ,KAAKY,SAAUnB,KAAMO,KAAKe,MAAMC,UAGpD,6BAASX,UAAU,aACjB,kBAAC,EAAD,CAAWH,YAAaF,KAAKe,MAAMC,e,GA3B3BP,IAAMC,WEKJY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.27e36abe.chunk.js","sourcesContent":["import React from 'react';\n\nimport marked from 'marked';\n\nexport default class Previewer extends React.Component {\n  render() {\n    //console.log(this.props.textPreview);\n    const renderer = new marked.Renderer();\n    marked.setOptions({\n      breaks: true,\n    });\n    renderer.link = function (href, title, text) {\n      return `${`<a target=\"_blank\" href=\"${href}\">${text}`}</a>`;\n    }\n    renderer.table = function (title, body) {\n      return `${`<div class=\"table-responsive\"><table class=\"table table-bordered table-hover table-sm\"><thead>${title}</thead><tbody>${body}`}</tbody></table></div>`;\n    }\n    renderer.image = (href, title, text)=>(\n      `${`<img src=\"${href}\" alt=\"${text}\" `} class=\"img img-thumbnail\"/>`\n    )\n    const html = marked.parser(marked.lexer(this.props.textPreview));\n    console.log(html);\n\n    return (\n      <div className=\"previewerWrap\">\n        <h3 className=\"header\">Previewer</h3>\n        <div id=\"preview\" className=\"textarea\" /* placeholder={html} */\n          dangerouslySetInnerHTML={{ __html: marked(this.props.textPreview, { renderer: renderer }) }} >\n\n        </div>\n      </div>\n    )\n  };\n}\n","import React from 'react';\n\nexport default class Editor extends React.Component {\n  render() {\n    return(\n      <div className=\"editorWrap\">\n        <h3 className=\"header\">Editor</h3>\n        <textarea id=\"editor\" onChange={this.props.onChange} type=\"text\">{this.props.text}</textarea>\n      </div>\n    )\n  };\n}\n","import React from 'react';\nimport './App.scss';\nimport Previewer from './components/Previewer';\nimport Editor from './components/Editor';\n\nimport { placeholder } from './constants';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mdText: placeholder\n    };\n    this.onChange = this.onChange.bind(this);\n    console.log(this.state.mdText);\n  }\n  onChange(event) {\n    this.setState({\n      mdText: event.target.value\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n\n        <header className=\"App-header\">\n          <h1>Markdown Previewer</h1>\n        </header>\n\n        <section className=\"text-left\">\n          <Editor onChange={this.onChange} text={this.state.mdText}/>\n        </section>\n\n        <section className=\"text-left\">\n          <Previewer textPreview={this.state.mdText} />\n        </section>\n\n      </div>\n    );\n  };\n}\n\nexport default App;\n","export const placeholder = \n`# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}